// Some basic utilities that didn't fit anywhere else.unit CarbonUtils;interfaceuses	MacOSAll;function LoadImage(fileName: AnsiString): CGImageRef;function CGRectMake(x: Single; y: Single; width: Single; height: Single): CGRect;procedure PrintAllViews(window: WindowRef);implementation// Loading images is TEDIOUS with CG! See API Wars for comments.function LoadImage(fileName: AnsiString): CGImageRef;var	url: CFURLRef;	provider: CGDataProviderRef;	image: CGImageRef;		pathCFStr: CFStringRef;	pathStr: AnsiString;begin	url := CFBundleCopyBundleURL(CFBundleGetMainBundle);	pathCFStr := CFURLCopyFileSystemPath(url, kCFURLPOSIXPathStyle);	pathStr := CFStringGetCStringPtr(pathCFStr, CFStringGetSystemEncoding);	// CFStringGetCStringPtr is unreliable!!!	CFRelease(pathCFStr);	CFRelease(url);	fileName := pathStr + '/Contents/Resources/' + fileName;	pathCFStr := CFStringCreateWithBytes(nil, @fileName[1], Length(fileName), kCFStringEncodingMacRoman, false);	url := CFURLCreateWithFileSystemPath(nil, pathCFStr, kCFURLPOSIXPathStyle, false);	provider := CGDataProviderCreateWithURL(url);	image := CGImageCreateWithJPEGDataProvider(provider, nil, 1, kCGRenderingIntentDefault);	CFRelease(url);	CFRelease(pathCFStr);	CGDataProviderRelease(provider);	LoadImage := image;end;// CGRectMake should be in FPCMacOSAll/RTL in some wayfunction CGRectMake(x: Single; y: Single; width: Single; height: Single): CGRect;var	cgr: CGRect;begin	cgr.origin.x := x;	cgr.origin.y := y;	cgr.size.width := width;	cgr.size.height := height;	CGRectMake := cgr;end;// Search all HIViews of a window and print themprocedure PrintAllViews(window: WindowRef);	procedure SearchViews(hv: HIViewRef; level: Integer);	var		hv1: HIViewRef;		classID: CFStringRef;		i: Integer;		outID: ControlID;		helpStr: String;		r: Rect;		err: OSErr;	begin		for i := 1 to level do Write(':');			hv1 := HIViewGetFirstSubview(hv);		while hv1 <> nil do		begin			classID := HIObjectCopyClassID(HIObjectRef(hv1));//			WriteLn(CFStringGetCStringPtr(classID, CFStringGetSystemEncoding));			CFRelease(classID);			err := GetControlID( hv1, outID);			helpStr[0] := Char(4);			BlockMoveData(@outID.signature, @helpStr[1], 4);			WriteLn(outID.id, ',', helpStr);						GetControlBounds(hv1, r);//			WriteLn(r.top, ',', r.bottom, ',', r.left, ',', r.right);			SearchViews(hv1, level+1);			hv1 := HIViewGetNextView(hv1);		end;	end;var	hv: HIViewRef;begin	WriteLn('All views of window:');	WriteLn('------------------');	hv := HIViewGetRoot(window);		SearchViews(hv, 0); // Recursive search	WriteLn('------------------');end; {PrintAllViews}end.