// "Recent files" sub-menu to the File menu// Originally implemented 2013-03-17 to 18.{$mode macpas}unit RecentFiles;interfaceuses	MacOSAll, UtilsTypes, TransSkel4;procedure UpdateRecentMenu;procedure SaveToRecent(theSpec: FSSpecString);procedure SaveRecentList;procedure LoadRecentList;procedure InitRecentMenu(fileMenu: MenuRef);implementationuses	FileUtils, LWPEdit;var	recentMenu: MenuRef;	recentPathList: array of AnsiString;const	kMaxRecent = 10; // Setting?procedure UpdateRecentMenu;var	i: Longint;begin	// Clear menu	for i := 0 to High(recentPathList)+1 do		DeleteMenuItem (recentMenu, 1);	if Length(recentPathList) > kMaxRecent then	begin//		for i := 0 to kMaxRecent - 1 do // High(recentMenu) - kMaxRecent to High(recentMenu) do//		begin//			recentPathList[i] := recentPathList[i + Length(recentPathList) - kMaxRecent];//		end;		SetLength(recentPathList, kMaxRecent);	end;		// Append list	for i := 0 to High(recentPathList) do		AppendMenu(recentMenu, GetLastToken(recentPathList[i]));end;procedure SaveToRecent(theSpec: FSSpecString);var	i, j: Longint;begin	j := Length(recentPathList);	if Length(recentPathList) > 0 then	for i := 0 to High(recentPathList) do		if recentPathList[i] = theSpec then		begin // If already in list, move to beginning			for j := i-1 downto 0 do				recentPathList[j+1] := recentPathList[j];			recentPathList[0] := theSpec;			UpdateRecentMenu;			SaveRecentList;			Exit(SaveToRecent); // Why was this commented out? Reactivated 141118		end;		// Otherwise, insert at beginning	SetLength(recentPathList, Length(recentPathList) + 1);	for i := High(recentPathList) downto 1 do		recentPathList[i] := recentPathList[i-1];	recentPathList[0] := theSpec;		UpdateRecentMenu;	SaveRecentList;end;procedure SaveRecentList;var	i: Longint;	recentString, pref: AnsiString;begin	recentString := '';	for i := 0 to High(recentPathList) do		recentString := recentString + recentPathList[i] + #13;		pref := GetPreferencesFolder;	if Length(pref) > 0 then	begin		WriteStringToFile('',  pref+ '/LightweightIDERecentFiles.txt'); //Empty old list.		WriteStringToFile(recentString, pref + '/LightweightIDERecentFiles.txt');	end	else		;end;procedure LoadRecentList;var	i, b, count: Longint;	recentString, pref: AnsiString;	err: OSErr;	flag: Boolean;begin	pref := GetPreferencesFolder;	recentString := ReadFileToString(pref + '/LightweightIDERecentFiles.txt', err);		b := 1;	count := 0;	for i := 1 to Length(recentString) do	begin		if recentString[i] = #13 then		begin			if i > b+1 then			begin				count := count + 1;				SetLength(recentPathList, count);				recentPathList[High(recentPathList)] := Copy(recentString, b, i - b);				b := i+1;			end;		end;	end;		UpdateRecentMenu;end;procedure DoRecentMenu(item:Integer);begin	WriteLn('Recent ', item);	if (item > 0) and (item-1 <= High(recentPathList)) then		OpenFileToWindow(recentPathList[item - 1]);end;procedure InitRecentMenu(fileMenu: MenuRef);begin	SetLength(recentPathList, 0);	AppendMenu(fileMenu, 'Recent Items');//	AppendMenu(fileMenu, 'Guckmuggel');//	AppendMenu(fileMenu, 'Bananamoon');//	AppendMenu(fileMenu, 'Off');//	AppendMenu(fileMenu, 'Barbapapa');	recentMenu := NewMenu(120, 'Recents');//	InsertMenu(recentMenu, kInsertHierarchicalMenu);//	SetMenuItemHierarchicalID (fileMenu, 12, 120);//	AppendMenu(recentMenu, 'Recent test 1');//	AppendMenu(recentMenu, 'Recent test 2');	SetMenuItemHierarchicalMenu(fileMenu, 13, recentMenu); // MUST be updated if the file menu changes! Or I must retrieve the menu length.	SkelHMenu(recentMenu, @DoRecentMenu, nil);	LoadRecentList;end;end.