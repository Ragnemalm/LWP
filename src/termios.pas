unit termios;interface(*}{ * Copyright (c) 2000-2005 Apple Computer, Inc. All rights reserved.}{ *}{ * @APPLE_LICENSE_HEADER_START@}{ * }{ * The contents of this file constitute Original Code as defined in and}{ * are subject to the Apple Public Source License Version 1.1 (the}{ * "License").  You may not use this file except in compliance with the}{ * License.  Please obtain a copy of the License at}{ * http://www.apple.com/publicsource and read it before using this file.}{ * }{ * This Original Code and all software distributed under the License are}{ * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER}{ * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,}{ * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,}{ * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the}{ * License for the specific language governing rights and limitations}{ * under the License.}{ * }{ * @APPLE_LICENSE_HEADER_END@}{ *)(* Copyright (c) 1997 Apple Computer, Inc. All Rights Reserved *)(*}{ * Copyright (c) 1988, 1989, 1993, 1994}{ *	The Regents of the University of California.  All rights reserved.}{ *}{ * Redistribution and use in source and binary forms, with or without}{ * modification, are permitted provided that the following conditions}{ * are met:}{ * 1. Redistributions of source code must retain the above copyright}{ *    notice, this list of conditions and the following disclaimer.}{ * 2. Redistributions in binary form must reproduce the above copyright}{ *    notice, this list of conditions and the following disclaimer in the}{ *    documentation and/or other materials provided with the distribution.}{ * 3. All advertising materials mentioning features or use of this software}{ *    must display the following acknowledgement:}{ *      This product includes software developed by the University of}{ *      California, Berkeley and its contributors.}{ * 4. Neither the name of the University nor the names of its contributors}{ *    may be used to endorse or promote products derived from this software}{ *    without specific prior written permission.}{ *}{ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND}{ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE}{ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE}{ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE}{ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL}{ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS}{ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)}{ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT}{ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY}{ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF}{ * SUCH DAMAGE.}{ *}{ *	@(#)termios.h	8.3 (Berkeley) 3/28/94}{ *)(*}{ * Special Control Characters}{ *}{ * Index into c_cc[] character array.}{ *}{ *	Name	     Subscript	Enabled by}{ *)const	VEOF=		0;(* ICANON *)	VEOL=		1;(* ICANON *)	VEOL2=		2;(* ICANON together with IEXTEN *)	VERASE=		3;(* ICANON *)	VWERASE= 		4;(* ICANON together with IEXTEN *)	VKILL=		5;(* ICANON *)	VREPRINT= 	6;(* ICANON together with IEXTEN *)	(*			7	   spare 1 *)	VINTR=		8;(* ISIG *)	VQUIT=		9;(* ISIG *)	VSUSP=		10;(* ISIG *)	VDSUSP=		11;(* ISIG together with IEXTEN *)	VSTART=		12;(* IXON, IXOFF *)	VSTOP=		13;(* IXON, IXOFF *)	VLNEXT=		14;(* IEXTEN *)	VDISCARD=		15;(* IEXTEN *)	VMIN=		16;(* !ICANON *)	VTIME=		17;(* !ICANON *)	VSTATUS=		18;(* ICANON together with IEXTEN *)	(*			19	   spare 2 *)	NCCS=		20;// CCEQ=(val, c)	((c) == (val) ? (val) != _POSIX_VDISABLE : 0);(*}{ * Input flags - software input processing}{ *)	IGNBRK=		$00000001	;(* ignore BREAK condition *)	BRKINT=		$00000002	;(* map BREAK to SIGINTR *)	IGNPAR=		$00000004	;(* ignore (discard) parity errors *)	PARMRK=		$00000008	;(* mark parity and framing errors *)	INPCK=		$00000010	;(* enable checking of parity errors *)	ISTRIP=		$00000020	;(* strip 8th bit off chars *)	INLCR=		$00000040	;(* map NL into CR *)	IGNCR=		$00000080	;(* ignore CR *)	ICRNL=		$00000100	;(* map CR to NL (ala CRMOD) *)	IXON=		$00000200	;(* enable output flow control *)	IXOFF=		$00000400	;(* enable input flow control *)	IXANY=		$00000800	;(* any char will restart after stop *)	IMAXBEL=		$00002000	;(* ring bell on input queue full *)	(*}{ * Output flags - software output processing}{ *)	OPOST=		$00000001	;(* enable following output processing *)	ONLCR=		$00000002	;(* map NL to CR-NL (ala CRMOD) *)	OXTABS=		$00000004	;(* expand tabs to spaces *)	ONOEOT=		$00000008	;(* discard EOT's (^D) on output) *)(*}{ * The following block of features is unimplemented.  Use of these flags in}{ * programs will currently result in unexpected behaviour.}{ *}{ * - Begin unimplemented features}{ *)	OCRNL=		$00000010	;(* map CR to NL on output *)	ONOCR=		$00000020	;(* no CR output at column 0 *)	ONLRET=		$00000040	;(* NL performs CR function *)	OFILL=		$00000080	;(* use fill characters for delay *)	NLDLY=		$00000300	;(* \n delay *)	TABDLY=		$00000c00	;(* horizontal tab delay *)	CRDLY=		$00003000	;(* \r delay *)	FFDLY=		$00004000	;(* form feed delay *)	BSDLY=		$00008000	;(* \b delay *)	VTDLY=		$00010000	;(* vertical tab delay *)	OFDEL=		$00020000	;(* fill is DEL, else NUL *)(*}{ * These manifest constants have the same names as those in the header}{ * <sys/ioctl_compat.h>, so you are not permitted to have both definitions}{ * in scope simultaneously in the same compilation unit.  Nevertheless,}{ * they are required to be in scope when _POSIX_C_SOURCE is requested;}{ * this means that including the <sys/ioctl_compat.h> header before this}{ * one whien _POSIX_C_SOURCE is in scope will result in redefintions.  We}{ * attempt to maintain these as the same values so as to avoid this being}{ * an outright error in most compilers.}{ *)	NL0=	$00000000;	NL1=	$00000100;	NL2=	$00000200;	NL3=	$00000300;	TAB0=	$00000000;	TAB1=	$00000400;	TAB2=	$00000800;	TAB3=	$00000c00;	CR0=	$00000000;	CR1=	$00001000;	CR2=	$00002000;	CR3=	$00003000;	FF0=	$00000000;	FF1=	$00004000;	BS0=	$00000000;	BS1=	$00008000;	VT0=	$00000000;	VT1=	$00010000;(*}{ * + End unimplemented features}{ *)(*}{ * Control flags - hardware control of terminal}{ *)CIGNORE=		$00000001	;(* ignore control flags *)CSIZE=		$00000300	;(* character size mask *)CS5=		    $00000000	    ;(* 5 bits (pseudo) *)CS6=		    $00000100	    ;(* 6 bits *)CS7=		    $00000200	    ;(* 7 bits *)CS8=		    $00000300	    ;(* 8 bits *)CSTOPB=		$00000400	;(* send 2 stop bits *)CREAD=		$00000800	;(* enable receiver *)PARENB=		$00001000	;(* parity enable *)PARODD=		$00002000	;(* odd parity, else even *)HUPCL=		$00004000	;(* hang up on last close *)CLOCAL=		$00008000	;(* ignore modem status lines *)CCTS_OFLOW=	$00010000	;(* CTS flow control of output *)CRTS_IFLOW=	$00020000	;(* RTS flow control of input *)CDTR_IFLOW=	$00040000	;(* DTR flow control of input *)CDSR_OFLOW=	$00080000	;(* DSR flow control of output *)CCAR_OFLOW=	$00100000	;(* DCD flow control of output *)MDMBUF=		$00100000	;(* old name for CCAR_OFLOW *)CRTSCTS=		(CCTS_OFLOW + CRTS_IFLOW);(*}{ * "Local" flags - dumping ground for other state}{ *}{ * Warning: some flags in this structure begin with}{ * the letter "I" and look like they belong in the}{ * input flag.}{ *)ECHOKE=		$00000001	;(* visual erase for line kill *)ECHOE=		$00000002	;(* visually erase chars *)ECHOK=		$00000004	;(* echo NL after line kill *)ECHO=		$00000008	;(* enable echoing *)ECHONL=		$00000010	;(* echo NL even if ECHO is off *)ECHOPRT=		$00000020	;(* visual erase mode for hardcopy *)ECHOCTL=  	$00000040	;(* echo control chars as ^(Char) *)ISIG=		$00000080	;(* enable signals INTR, QUIT, [D]SUSP *)ICANON=		$00000100	;(* canonicalize input lines *)ALTWERASE=	$00000200	;(* use alternate WERASE algorithm *)IEXTEN=		$00000400	;(* enable DISCARD and LNEXT *)EXTPROC=         $00000800      ;(* external processing *)TOSTOP=		$00400000	;(* stop background jobs from output *)FLUSHO=		$00800000	;(* output being flushed (state) *)NOKERNINFO=	$02000000	;(* no kernel output from VSTATUS *)PENDIN=		$20000000	;(* XXX retype pending input (state) *)NOFLSH=		$80000000	;(* don't flush after interrupt *) type  tcflag_t=LongInt; // UInt32? type  cc_t=char; type  speed_t=LongInt;	(* XXX should be unsigned long *)TermiosRec = record	c_iflag: tcflag_t;	(* input flags *)	c_oflag: tcflag_t;	(* output flags *)	c_cflag: tcflag_t;	(* control flags *)	c_lflag: tcflag_t;	(* local flags *)	c_cc: packed array [0..NCCS-1] of cc_t;	(* control chars *)	c_ispeed: speed_t;	(* input speed *)	c_ospeed: speed_t;	(* output speed *) end; TermiosPtr = ^TermiosRec;(*}{ * Commands passed to tcsetattr() for setting the termios structure.}{ *)constTCSANOW=		0;(* make change immediate *)TCSADRAIN=	1;(* drain output, then change *)TCSAFLUSH=	2;(* drain output, flush input *)TCSASOFT=		$10;(* flag - don't alter h.w. state *)(*}{ * Standard speeds}{ *)B0=	0;B50=	50;B75=	75;B110=	110;B134=	134;B150=	150;B200=	200;B300=	300;B600=	600;B1200=	1200;B1800=	1800;B2400=	2400;B4800=	4800;B9600=	9600;B19200=	19200;B38400=	38400;B7200=	7200;B14400=	14400;B28800=	28800;B57600=	57600;B76800=	76800;B115200=	115200;B230400=	230400;EXTA=	19200;EXTB=	38400;TCIFLUSH=	1;TCOFLUSH=	2;TCIOFLUSH=	3;TCOOFF=		1;TCOON=		2;TCIOFF=		3;TCION=		4;// sys/cdefs.hfunction tcgetattr(fd: Longint; t: termiosPtr):Longint;cdecl;external 'clib' name 'tcgetattr';function tcsetattr(fd: Longint; whatever: Longint; t: termiosPtr):Longint;cdecl;external 'clib' name 'tcsetattr';//speed_t	cfgetispeed(const struct termios *):__BEGIN_DECLS;// function cfgetospeed(termios:struct *):speed_t;;// function cfsetispeed(termios:struct *; speed_t):Integer;;// function cfsetospeed(termios:struct *; speed_t):Integer;;// function tcgetattr(int; stermios:truct *):Integer;;// function tcsetattr(int; int;  stermios:truct *):Integer;;// function tcdrain(int):Integer;;// function tcflow(int; int):Integer;;// function tcflush(int; int):Integer;;// function tcsendbreak(int; int):Integer;;// procedure cfmakeraw(termios:struct *);;// function cfsetspeed(termios:struct *; speed_t):Integer;;(*}{ * Include tty ioctl's that aren't just for backwards compatibility}{ * with the old tty driver.  These ioctl definitions were previously}{ * in <sys/ioctl.h>.}{ *)implementationend.